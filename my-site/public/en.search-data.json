{"/blog/markdown-syntax-guide-copy-2/":{"data":{"":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files.","basic-syntax#Basic Syntax":"Headings # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 ","heading-2#Heading 2":"Heading 3 Heading 4 Heading 5 Heading 6 Emphasis *This text will be italic* _This will also be italic_ **This text will be bold** __This will also be bold__ _You **can** combine them_ This text will be italic\nThis will also be italic\nThis text will be bold\nThis will also be bold\nYou can combine them\nLists Unordered * Item 1 * Item 2 * Item 2a * Item 2b Item 1 Item 2 Item 2a Item 2b Ordered 1. Item 1 2. Item 2 3. Item 3 1. Item 3a 2. Item 3b Images ![GitHub Logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png) Links [Hugo](https://gohugo.io) Hugo\nBlockquotes As Newton said: \u003e If I have seen further it is by standing on the shoulders of Giants. If I have seen further it is by standing on the shoulders of Giants.\nInline Code Inline `code` has `back-ticks around` it. Inline code has back-ticks around it.\nCode Blocks Syntax Highlighting ```go func main() { fmt.Println(\"Hello World\") } ``` func main() { fmt.Println(\"Hello World\") } Tables | Syntax | Description | | --------- | ----------- | | Header | Title | | Paragraph | Text | Syntax Description Header Title Paragraph Text ","references#References":" Markdown Syntax Hugo Markdown "},"title":"Markdown Syntax Guide"},"/blog/markdown-syntax-guide-copy/":{"data":{"":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files.","basic-syntax#Basic Syntax":"Headings # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 ","heading-2#Heading 2":"Heading 3 Heading 4 Heading 5 Heading 6 Emphasis *This text will be italic* _This will also be italic_ **This text will be bold** __This will also be bold__ _You **can** combine them_ This text will be italic\nThis will also be italic\nThis text will be bold\nThis will also be bold\nYou can combine them\nLists Unordered * Item 1 * Item 2 * Item 2a * Item 2b Item 1 Item 2 Item 2a Item 2b Ordered 1. Item 1 2. Item 2 3. Item 3 1. Item 3a 2. Item 3b Images ![GitHub Logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png) Links [Hugo](https://gohugo.io) Hugo\nBlockquotes As Newton said: \u003e If I have seen further it is by standing on the shoulders of Giants. If I have seen further it is by standing on the shoulders of Giants.\nInline Code Inline `code` has `back-ticks around` it. Inline code has back-ticks around it.\nCode Blocks Syntax Highlighting ```go func main() { fmt.Println(\"Hello World\") } ``` func main() { fmt.Println(\"Hello World\") } Tables | Syntax | Description | | --------- | ----------- | | Header | Title | | Paragraph | Text | Syntax Description Header Title Paragraph Text ","references#References":" Markdown Syntax Hugo Markdown "},"title":"Markdown Syntax Guide"},"/blog/markdown-syntax-guide/":{"data":{"":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files.","basic-syntax#Basic Syntax":"Headings # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 ","heading-2#Heading 2":"Heading 3 Heading 4 Heading 5 Heading 6 Emphasis *This text will be italic* _This will also be italic_ **This text will be bold** __This will also be bold__ _You **can** combine them_ This text will be italic\nThis will also be italic\nThis text will be bold\nThis will also be bold\nYou can combine them\nLists Unordered * Item 1 * Item 2 * Item 2a * Item 2b Item 1 Item 2 Item 2a Item 2b Ordered 1. Item 1 2. Item 2 3. Item 3 1. Item 3a 2. Item 3b Images ![GitHub Logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png) Links [Hugo](https://gohugo.io) Hugo\nBlockquotes As Newton said: \u003e If I have seen further it is by standing on the shoulders of Giants. If I have seen further it is by standing on the shoulders of Giants.\nInline Code Inline `code` has `back-ticks around` it. Inline code has back-ticks around it.\nCode Blocks Syntax Highlighting ```go func main() { fmt.Println(\"Hello World\") } ``` func main() { fmt.Println(\"Hello World\") } Tables | Syntax | Description | | --------- | ----------- | | Header | Title | | Paragraph | Text | Syntax Description Header Title Paragraph Text ","references#References":" Markdown Syntax Hugo Markdown "},"title":"Markdown Syntax Guide"},"/projects/example-project-copy-2/":{"data":{"":"A minimal, self-hosted RSVP system built with Go, Tailwind CSS, and Alpine.js","key-features#Key Features":" Simple RSVP form with guest details Mobile-responsive design Admin dashboard for guest list management ","learnings#Learnings":" Practiced keeping dependencies minimal Balanced between features and simplicity Gained experience with Alpine.js for lightweight interactivity Improved understanding of Go’s templating system ","overview#Overview":"When planning my baby shower, I needed a simple RSVP system. Instead of using existing solutions, I decided to build my own minimal version as a side project. This gave me complete control over the features while keeping it lightweight and efficient.","tech-stack#Tech Stack":" Backend: Go (Golang)\nLess memory footprint for vps deployments Chosen for its simplicity and excellent performance Built-in HTTP server capabilities Easy deployment with single binary Minimal dependencies Frontend:\nTailwind CSS for utility-first styling Alpine.js for minimal JavaScript interactivity HTML templates with Go’s template package ","technical-implementation#Technical Implementation":" Used Go’s standard library for routing and handling HTTP requests Implemented server-side validation for form submissions Stored data in memory for simplicity and portability, only for one time use so for my use case it was fine Utilized Alpine.js for dynamic form validation and UI updates Designed with Tailwind CSS for a clean, modern interface "},"title":"RSVP Hub"},"/projects/example-project-copy-3/":{"data":{"":"A minimal, self-hosted RSVP system built with Go, Tailwind CSS, and Alpine.js","key-features#Key Features":" Simple RSVP form with guest details Mobile-responsive design Admin dashboard for guest list management ","learnings#Learnings":" Practiced keeping dependencies minimal Balanced between features and simplicity Gained experience with Alpine.js for lightweight interactivity Improved understanding of Go’s templating system ","overview#Overview":"When planning my baby shower, I needed a simple RSVP system. Instead of using existing solutions, I decided to build my own minimal version as a side project. This gave me complete control over the features while keeping it lightweight and efficient.","tech-stack#Tech Stack":" Backend: Go (Golang)\nLess memory footprint for vps deployments Chosen for its simplicity and excellent performance Built-in HTTP server capabilities Easy deployment with single binary Minimal dependencies Frontend:\nTailwind CSS for utility-first styling Alpine.js for minimal JavaScript interactivity HTML templates with Go’s template package ","technical-implementation#Technical Implementation":" Used Go’s standard library for routing and handling HTTP requests Implemented server-side validation for form submissions Stored data in memory for simplicity and portability, only for one time use so for my use case it was fine Utilized Alpine.js for dynamic form validation and UI updates Designed with Tailwind CSS for a clean, modern interface "},"title":"URL Shortener"},"/projects/example-project-copy/":{"data":{"":"A minimal, self-hosted RSVP system built with Go, Tailwind CSS, and Alpine.js","key-features#Key Features":" Simple RSVP form with guest details Mobile-responsive design Admin dashboard for guest list management ","learnings#Learnings":" Practiced keeping dependencies minimal Balanced between features and simplicity Gained experience with Alpine.js for lightweight interactivity Improved understanding of Go’s templating system ","overview#Overview":"When planning my baby shower, I needed a simple RSVP system. Instead of using existing solutions, I decided to build my own minimal version as a side project. This gave me complete control over the features while keeping it lightweight and efficient.","tech-stack#Tech Stack":" Backend: Go (Golang)\nLess memory footprint for vps deployments Chosen for its simplicity and excellent performance Built-in HTTP server capabilities Easy deployment with single binary Minimal dependencies Frontend:\nTailwind CSS for utility-first styling Alpine.js for minimal JavaScript interactivity HTML templates with Go’s template package ","technical-implementation#Technical Implementation":" Used Go’s standard library for routing and handling HTTP requests Implemented server-side validation for form submissions Stored data in memory for simplicity and portability, only for one time use so for my use case it was fine Utilized Alpine.js for dynamic form validation and UI updates Designed with Tailwind CSS for a clean, modern interface "},"title":"RSVP Hub"},"/projects/example-project/":{"data":{"":"A minimal, self-hosted RSVP system built with Go, Tailwind CSS, and Alpine.js","key-features#Key Features":" Simple RSVP form with guest details Mobile-responsive design Admin dashboard for guest list management ","learnings#Learnings":" Practiced keeping dependencies minimal Balanced between features and simplicity Gained experience with Alpine.js for lightweight interactivity Improved understanding of Go’s templating system ","overview#Overview":"When planning my baby shower, I needed a simple RSVP system. Instead of using existing solutions, I decided to build my own minimal version as a side project. This gave me complete control over the features while keeping it lightweight and efficient.","tech-stack#Tech Stack":" Backend: Go (Golang)\nLess memory footprint for vps deployments Chosen for its simplicity and excellent performance Built-in HTTP server capabilities Easy deployment with single binary Minimal dependencies Frontend:\nTailwind CSS for utility-first styling Alpine.js for minimal JavaScript interactivity HTML templates with Go’s template package ","technical-implementation#Technical Implementation":" Used Go’s standard library for routing and handling HTTP requests Implemented server-side validation for form submissions Stored data in memory for simplicity and portability, only for one time use so for my use case it was fine Utilized Alpine.js for dynamic form validation and UI updates Designed with Tailwind CSS for a clean, modern interface "},"title":"RSVP Hub"}}